package utils

import androidx.lifecycle.Observer
import org.mockito.ArgumentCaptor
import org.mockito.Mockito
import kotlin.reflect.KClass
import kotlin.reflect.full.primaryConstructor

object MockitoUtils {

    public inline fun<reified T : Any> anyOfType() = Mockito.mock(T::class.java)

    public inline fun <reified T: Any> argumentCaptor() = ArgumentCaptor.forClass(T::class.java)

    //https://medium.com/@elye.project/befriending-kotlin-and-mockito-1c2e7b0ef791
    public inline fun<T> typedAny(): T {
        Mockito.any<T>()
        return uninitialized()
    }

    fun <T> uninitialized(): T = null as T

    //https://github.com/nhaarman/mockito-kotlin/blob/87059d8f1c9bbce6564fc215174fdf89b1099ec9/mockito-kotlin/src/main/kotlin/com/nhaarman/mockitokotlin2/internal/CreateInstance.kt

    inline fun <reified T : Any> capture(captor: ArgumentCaptor<T>): T {
        return captor.capture() ?: createInstance()
    }

    inline fun <reified T : Any> createInstance(): T {
        return createInstance(T::class)
    }

    fun <T : Any> createInstance(kClass: KClass<T>): T {
        return castNull()
    }

    /**
     * Uses a quirk in the bytecode generated by Kotlin
     * to cast [null] to a non-null type.
     *
     * See https://youtrack.jetbrains.com/issue/KT-8135.
     */
    @Suppress("UNCHECKED_CAST")
    private fun <T> castNull(): T = null as T

    public fun <T> capturingObserver() = CapturingObserver<T>()

    class CapturingObserver<T> : Observer<T> {

        public val captured = mutableListOf<T>()

        override fun onChanged(t: T) {
            println("Captured value $t")
            captured.add(t)
        }
    }

}

